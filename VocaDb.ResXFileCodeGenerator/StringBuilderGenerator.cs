using System.Globalization;
using System.Resources;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Xml.Linq;

namespace VocaDb.ResXFileCodeGenerator;

public sealed class StringBuilderGenerator : IGenerator
{
	private static readonly Regex ValidMemberNamePattern = new(@"^[\p{L}\p{Nl}_][\p{Cf}\p{L}\p{Mc}\p{Mn}\p{Nd}\p{Nl}\p{Pc}]*$", RegexOptions.Compiled | RegexOptions.CultureInvariant);
	private static readonly Regex InvalidMemberNameSymbols = new(@"[^\p{Cf}\p{L}\p{Mc}\p{Mn}\p{Nd}\p{Nl}\p{Pc}]", RegexOptions.Compiled | RegexOptions.CultureInvariant);
	public string Generate(Stream resxStream, GeneratorOptions options)
	{
		// HACK: netstandard2.0 doesn't support improved interpolated strings?
		var builder = new StringBuilder();

		builder.AppendLine(Constants.AutoGeneratedHeader);
		builder.AppendLine("#nullable enable");

		builder.Append("namespace ");
		builder.AppendLine(options.CustomToolNamespace ?? options.LocalNamespace);
		builder.AppendLine("{");

		builder.Append("    using ");
		builder.Append(Constants.SystemGlobalization);
		builder.AppendLine(";");

		builder.Append("    using ");
		builder.Append(Constants.SystemResources);
		builder.AppendLine(";");

		builder.AppendLine();

		builder.Append("    ");
		builder.Append(options.PublicClass ? "public" : "internal");
		builder.Append(" static class ");
		builder.AppendLine(options.ClassName);
		builder.AppendLine("    {");

		builder.Append("        private static ");
		builder.Append(nameof(ResourceManager));
		builder.Append("? ");
		builder.Append(Constants.s_resourceManagerVariable);
		builder.AppendLine(";");

		builder.Append("        public static ");
		builder.Append(nameof(ResourceManager));
		builder.Append(" ");
		builder.Append(Constants.ResourceManagerVariable);
		builder.Append(" => ");
		builder.Append(Constants.s_resourceManagerVariable);
		builder.Append(" ??= new ");
		builder.Append(nameof(ResourceManager));
		builder.Append("(\"");
		builder.Append(options.LocalNamespace);
		builder.Append(".");
		builder.Append(options.ClassName);
		builder.Append("\", typeof(");
		builder.Append(options.ClassName);
		builder.AppendLine(").Assembly);");

		builder.Append("        public static ");
		builder.Append(nameof(CultureInfo));
		builder.Append("? ");
		builder.Append(Constants.CultureInfoVariable);
		builder.AppendLine(" { get; set; }");

		builder.AppendLine();

		static void CreateMember(StringBuilder builder, GeneratorOptions options, string name, string value)
		{
			string memberName;
			bool resourceAccessByName;

			if (ValidMemberNamePattern.IsMatch(name))
			{
				memberName = name;
				resourceAccessByName = true;
			}
			else
			{
				memberName = InvalidMemberNameSymbols.Replace(name, "_");
				resourceAccessByName = false;
			}

			builder.AppendLine("        /// <summary>");

			builder.Append("        /// Looks up a localized string similar to ");
			builder.Append(HttpUtility.HtmlEncode(value.Trim().Replace("\r\n", "\n").Replace("\r", "\n").Replace("\n", "\r\n        /// ")));
			builder.AppendLine(".");

			builder.AppendLine("        /// </summary>");

			builder.Append("        public static string");
			builder.Append(options.NullForgivingOperators ? null : "?");
			builder.Append(" ");
			builder.Append(memberName);

			if (resourceAccessByName)
			{
				builder.Append(" => ResourceManager.GetString(nameof(");
				builder.Append(name);
				builder.Append("), ");
			}
			else
			{
				builder.Append(@" => ResourceManager.GetString(""");
				builder.Append(name.Replace(@"""", @"\"""));
				builder.Append(@""", ");
			}
			builder.Append(Constants.CultureInfoVariable);
			builder.Append(")");
			builder.Append(options.NullForgivingOperators ? "!" : null);
			builder.AppendLine(";");
		}

		if (XDocument.Load(resxStream).Root is XElement element)
		{
			var members = element
				.Descendants()
				.Where(static data => data.Name == "data")
				.Select(static data => (data.Attribute("name")!.Value, data.Descendants("value").First().Value));

			foreach (var((key, value), index) in members.Select((kv, index) => (kv, index)))
			{
				if (index > 0)
				{
					builder.AppendLine();
				}

				CreateMember(builder, options, key, value);
			}
		}

		builder.AppendLine("    }");

		builder.Append("}");

		return builder.ToString();
	}
}
